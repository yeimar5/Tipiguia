// ===========================================
// CONSTANTES Y CONFIGURACIONES
// ===========================================

const ALERT_CONFIG = {
  toast: true,
  position: "top-start",
  showConfirmButton: false,
  timer: 1000,
  timerProgressBar: true,
  didOpen: (toast) => {
    toast.addEventListener("mouseenter", Swal.stopTimer);
    toast.addEventListener("mouseleave", Swal.resumeTimer);
  },
};

const UPPERCASE_INPUTS = ["via", "cruce", "placa", "complemento", "NombreTec"];
const ADDRESS_INPUTS = ["via", "cruce", "placa", "complemento"];
const INVALID_STRINGS = ["Invalid Date", "NaN", "undefined", "null"];

// ===========================================
// CONSTANTES PARA MAPEO DE SIN CONTACTO
// ===========================================

const TEXTO_SIN_CONTACTO = {
  1: " pero no contesta el tel√©fono",
  ocupado: " indica que la l√≠nea est√° ocupada",
  fuera_servicio: "indica  que este no se encuentra en servicio",
  equivocado: "pero indican que esta equivocado",
  buzon: " y la llamada se dirige directamente al buz√≥n de voz",
  cuelga: " contesta pero cliente cuelga la llamada",
  tercero: "Atiende la llamada una persona que no es el titular",
  rechaza_llamada: "rechaza la llamada",
};

// ===========================================
// FUNCIONES AUXILIARES PARA SIN CONTACTO
// ===========================================

function esSinContacto(valorContacto) {
  // "2" es contacto exitoso, "..." es valor por defecto
  // Todo lo dem√°s son tipos de sin contacto
  return (
    valorContacto !== "2" &&
    valorContacto !== "..." &&
    TEXTO_SIN_CONTACTO.hasOwnProperty(valorContacto)
  );
}

// Devuelve el texto correspondiente al valor de sin contacto
function obtenerTextoSinContacto(valorContacto) {
  return TEXTO_SIN_CONTACTO[valorContacto] || "Sin contacto";
}

function esFechaAnteriorAHoy(fechaStr) {
  const fecha = new Date(fechaStr);
  const hoy = new Date();
  hoy.setHours(0, 0, 0, 0);
  fecha.setHours(0, 0, 0, 0);
  return fecha < hoy;
}

// ===========================================
// INICIALIZACI√ìN Y EVENT LISTENERS
// ===========================================

const formulario = document.getElementById("Formulario");
if (formulario) {
  formulario.addEventListener("change", manejarCambio);
}
document.addEventListener("click", manejarClick);

// ===========================================
// MANEJADORES DE EVENTOS
// ===========================================

function manejarClick(evento) {
  const targetId = evento.target.id;
  const actions = {
    copiar: () =>
      copiarYAlertar(document.getElementById(`NombreTec`).value, alerta),
    copiar1: () =>
      copiarYAlertar(document.getElementById(`cedula`).value, alerta),
    copiar2: () => {
      let texto = document.getElementById(`telefono`).value.replace(`57`, ``);
      copiarYAlertar(texto, alerta);
    },
    copiar3: () =>
      copiarYAlertar(document.getElementById(`atis`).value, alerta),
    btnCopiarNota: copiarNotaConValidacion,
    pedirCuota: pedirCuota,
    limpiar: resetearFormularios,
    Tipificar: lanzarModal,
    imagen: subirImagen,
    guardarCambios: guardarEnLocalStorage,
    btnModificar: anularActualizartodo,
  };

  if (actions[targetId]) {
    actions[targetId]();
  }
}

// ===========================================
// FUNCIONES DE COPIA Y ALERTA
// ===========================================

function copiarYAlertar(t, callback) {
  try {
    if (esTextoInvalido(t)) {
      alert("Seleccione una fecha v√°lida, no sea pendej@ üòÇü§£üòÖ");
      return;
    }

    copiarAlPortapapeles(t);
    callback(t);
  } catch (error) {
    console.error(`Error al copiar al portapapeles:`, error);
  }
}

function alerta(text) {
  const Toast = Swal.mixin(ALERT_CONFIG);
  Toast.fire({
    icon: `success`,
    text: text,
  });
}

async function copiarAlPortapapeles(txt) {
  try {
    await navigator.clipboard.writeText(txt);
  } catch (error) {
    console.error(`Error al copiar al portapapeles:`, error);
  }
}

// ===========================================
// FUNCIONES DE PEDIDO DE CUOTA
// ===========================================

function pedirCuota() {
  try {
    const atis = document.getElementById(`atis`).value;
    const fechaAgenda = document.getElementById(`Fecha`).value;
    const franja = document.getElementById(`Franja`).value;
    const texto = `¬°Hola! Solicito un cupo para el d√≠a ${fechaAgenda} en la franja ${franja} para la orden ${atis}`;

    copiarAlPortapapeles(texto);
    alerta(texto, 1);
  } catch (error) {
    console.error(`Error al copiar al portapapeles:`, error);
  }
}

// ===========================================
// FUNCIONES DE RESETEO
// ===========================================

function resetearFormularios() {
  const datosTecnicoElement =
    document.getElementById("datosTecnico") || window.datosTecnico;
  const formularioElement =
    document.getElementById("Formulario") || window.Formulario;

  if (datosTecnicoElement && typeof datosTecnicoElement.reset === "function") {
    datosTecnicoElement.reset();
  }
  if (formularioElement && typeof formularioElement.reset === "function") {
    formularioElement.reset();
  }
  toggleElementStat("Contacto", false);
  resetearTextareas();

  // ‚ú® NUEVA L√çNEA - Limpiar resaltados
  limpiarResaltados();
}

// ===========================================
// FUNCIONES DE IMAGEN
// ===========================================

async function subirImagen() {
  try {
    const { value: file } = await Swal.fire({
      title: `Cambiar Fondo`,
      input: `file`,
      inputAttributes: {
        accept: `image/*`,
        "aria-label": "Subir Fondo",
      },
    });

    if (file) {
      procesarArchivoImagen(file);
    }
  } catch (error) {
    console.error(`Error al subir la imagen:`, error);
  }
}

// ===========================================
// FUNCIONES DE ALMACENAMIENTO
// ===========================================

function guardarEnLocalStorage() {
  const nombreAsesor = document.getElementById("NomAgent").value;
  const agentAsesor = document.getElementById("Agent").value;

  localStorage.setItem("nombreAsesor", nombreAsesor);
  localStorage.setItem("agentAsesor", agentAsesor);

  const closeButton = document.getElementById("close-login");
  if (closeButton) closeButton.click();

  alerta(`DATOS GUARDADOS\n Exitosamente`);
}

window.onload = function () {
  cargarImagenFondoGuardada();
  const nombreAsesor = localStorage.getItem("nombreAsesor");
  const agentAsesor = localStorage.getItem("agentAsesor");
};

// ===========================================
// FUNCIONES DE MODAL
// ===========================================

function lanzarModal() {
  const { nombreAsesor, agentAsesor } = obtenerDatosLocalStorage();

  if (nombreAsesor && agentAsesor) {
    document.getElementById("NomAgent").value = nombreAsesor;
    document.getElementById("Agent").value = agentAsesor.replace("agent_", "");

    const modal = new bootstrap.Modal(document.getElementById("tipificarNota"));
    modal.show();
    manejarCambio();
  } else {
    Swal.fire({
      title: "DATOS FALTANTES",
      text: "Por Favor, Ingresa tu Nombre y tu Numero de Agent.",
      iconColor: "#f8f32b",
      icon: "warning",
      confirmButtonColor: "#70b578",
      confirmButtonText: "Ingresar datos",
    }).then((result) => {
      if (result.isConfirmed) {
        const modal = new bootstrap.Modal(
          document.getElementById("login-modal")
        );
        modal.show();
      }
    });
  }
}

// ===========================================
// FUNCIONES DE FORMATO
// ===========================================

function FormatearFecha(fecha) {
  const [anio, mes, dia] = fecha.split("-");
  const fechaObj = new Date(anio, mes - 1, dia);

  const hoy = new Date();
  hoy.setHours(0, 0, 0, 0);
  fechaObj.setHours(0, 0, 0, 0);

  if (esFechaAnteriorAHoy(fechaObj)) {
    alert(
      "La fecha seleccionada no puede ser anterior a hoy. Seleccione una fecha v√°lida üìÖ‚ö†Ô∏è"
    );
    document.getElementById(`Fecha`).value = null;
    return;
  }

  const opciones = { weekday: "long", day: "numeric", month: "long" };
  const fecha_Agenda = fechaObj.toLocaleDateString("es-ES", opciones);
  return fecha_Agenda;
}

function convertToUppercase(input) {
  const cursorPosition = input.selectionStart;
  input.value = input.value.toUpperCase();
  input.setSelectionRange(cursorPosition, cursorPosition);
}

function limpiarTexto(texto) {
  return texto
    .replace(/\([^)]*\)/g, "") // Eliminar par√©ntesis y su contenido
    .replace(/\|/g, "") // Eliminar barras verticales
    .replace(/\¬ø/g, "√ë") // Corregir codificaci√≥n ¬ø ‚Üí √ë
    .replace(/\s+/g, " ") // Normalizar espacios
    .trim(); // Limpiar espacios al inicio/final
}

function formatoOracion(texto) {
  return texto
    .toLowerCase()
    .replace(
      /(^|\.\s+)([a-z√°√©√≠√≥√∫√º√±])/g,
      (match, p1, p2) => p1 + p2.toUpperCase()
    );
}

// ===========================================
// FUNCIONES DE DIRECCI√ìN
// ===========================================

function concatenateInputs() {
  // Si el checkbox est√° marcado, no hacer concatenaci√≥n autom√°tica
  const checkbox = document.getElementById("direccionNoLegible");
  if (checkbox && checkbox.checked) {
    return;
  }
  
  const via = document.getElementById("via").value || "";
  const cruce = document.getElementById("cruce").value || "";
  const placa = document.getElementById("placa").value || "";
  const complemento = document.getElementById("complemento").value || "";

  const parts = [via, cruce, placa, complemento].filter(
    (part) => part.trim() !== ""
  );
  const result = "en recibo publico esta " + parts.join(" ");

  actualizarResultadoDireccion(result);
}

// ===========================================
// FUNCIONES DE TEXTAREA
// ===========================================

function autoResize(textarea) {
  textarea.style.height = "auto";
  textarea.style.height = textarea.scrollHeight + "px";
}

function actualizarNotaCompleta() {
  crearNota();
  autoResize(document.getElementById("textoNota"));
}

function actualizarNota(event) {
  return true;
}

function Actualizartodo() {
  const formulario = document.querySelector("#Formulario");
  formulario.addEventListener("input", (event) => {
    actualizarNotaCompleta();
  });
}

function anularActualizartodo() {
  document
    .querySelector("#Formulario")
    .removeEventListener("input", actualizarNota);
  document.getElementById("textoNota").focus();
}

// ===========================================
// FUNCIONES DE DOM
// ===========================================

function visualizarPantalla(selectors, displayValue) {
  selectors.forEach((selector) => {
    const element = document.querySelector(selector);
    if (element) {
      element.style.display = displayValue;
    } else {
      console.warn(`Elemento no encontrado para el selector: ${selector}`);
    }
  });
}

function cambiarColorFondo(color) {
  const colorElement = document.getElementById(`color`);
  if (colorElement) {
    colorElement.style.background = color;
  } else {
    console.warn(`Elemento con id 'color' no encontrado`);
  }
}

function setInnerHTML(selector, html) {
  const element = document.querySelector(selector);
  if (element) {
    element.innerHTML = html;
  } else {
    console.warn(`Elemento no encontrado para el selector: ${selector}`);
  }
}

function ValueMostrar(selector, valorValue) {
  const element = document.querySelector(selector);
  if (element) {
    element.textContent = valorValue;
  } else {
    console.warn(`Elemento no encontrado para el selector: ${selector}`);
  }
}

// ===========================================
// INICIALIZACI√ìN DE INPUTS
// ===========================================
function inicializarInputsEnMayusculas() {
  UPPERCASE_INPUTS.forEach(function (inputId) {
    const input = document.getElementById(inputId);
    if (input) {
      input.addEventListener("input", function () {
        convertToUppercase(this);

        if (ADDRESS_INPUTS.includes(inputId)) {
          concatenateInputs();
        }
      });
    }
  });
}

function inicializarCheckboxNotaAplicativos() {
  const checkbox = document.getElementById("notaApp");
  if (checkbox) {
    checkbox.addEventListener("change", function () {
      const textoLabel = this.checked ? "NOTA APLICATIVOS" : "NOTA NORMAL";
      setInnerHTML("#labelText", textoLabel);

      // Regenerar la nota cuando cambie el estado del checkbox
      if (typeof crearNota === "function") {
        crearNota();
      }
    });
  }
}

document.addEventListener("DOMContentLoaded", function () {
  inicializarInputsEnMayusculas();
  inicializarCheckboxNotaAplicativos();
  inicializarCheckboxDireccionNoLegible(); 
});

// ===========================================
//           FUNCIONES AUXILIARES
// ===========================================

function esTextoInvalido(texto) {
  return INVALID_STRINGS.some((invalid) => texto.includes(invalid));
}

function obtenerDatosLocalStorage() {
  return {
    nombreAsesor: localStorage.getItem("nombreAsesor"),
    agentAsesor: localStorage.getItem("agentAsesor"),
    imagenFondo: localStorage.getItem("imagenFondo"),
  };
}

function cargarImagenFondoGuardada() {
  const { imagenFondo } = obtenerDatosLocalStorage();
  if (imagenFondo) {
    document.body.style.backgroundImage = `url(${imagenFondo})`;
  }
}

function procesarArchivoImagen(file) {
  const reader = new FileReader();

  reader.onload = (e) => {
    const base64Image = e.target.result;
    document.body.style.backgroundImage = `url(${base64Image})`;
    localStorage.setItem(`imagenFondo`, base64Image);
    Swal.fire({ title: `Su fondo Ha Sido Cambiado` });
  };

  reader.onerror = (e) => {
    console.error(`Error al leer el archivo:`, e);
    Swal.fire({
      title: `Error`,
      text: `No se pudo cambiar el fondo. Int√©ntelo de nuevo.`,
      icon: `error`,
    });
  };

  reader.readAsDataURL(file);
}

function resetearTextareas() {
  const textareas = document.querySelectorAll("textarea");
  textareas.forEach((textarea) => {
    textarea.style.height = "auto";
    textarea.rows = 2;
  });
}

function actualizarResultadoDireccion(result) {
  const resultDiv = document.getElementById("resultado");
  if (!resultDiv) return;

  if (result.trim() === "") {
    resultDiv.value = "direccion recibo";
    resultDiv.style.color = "#6c757d";
  } else {
    resultDiv.value = result;
    resultDiv.style.color = "#495057";
  }
}

function ordenarElementos(elem1, elem2) {
  if (elem1 && elem2 && elem2.parentNode) {
    elem2.parentNode.insertBefore(elem1, elem2);
  }
}

// ===========================================
// FUNCIONES DE CREACI√ìN DE NOTA
// ===========================================
const ids = [
  "Motivo",
  "Mtecnico",
  "NumTitular",
  "NomTitular",
  "Contingencia",
  "Aceptains",
  "aceptarRecibo",
  "rol",
  "Contacto",
  "mQuiebre",
  "Musuario",
  "Fecha",
  "Franja",
  "gps",
  "SF",
  "FC",
  "sus",
  "NomAgent",
  "Agent",
  "direccionSistema",
  "resultado",
  "DRP"
];

const campos = {};
ids.forEach((id) => {
  campos[id] = document.getElementById(id);
});

function obtenerValoresFormulario() {
  return {
    motivoLlamada: campos.Motivo.value,
    motivoTecnico: campos.Mtecnico,
    numeroTitular: campos.NumTitular.value,
    nombreTitular: campos.NomTitular.value,
    contingenciaActiva: campos.Contingencia.checked,
    aLaEsperadeInstalacion: campos.Aceptains.checked,
    aceptarRecibo: campos.aceptarRecibo.checked,
    trabajador: campos.rol.value,
    contactoConTitular: campos.Contacto.value,
    motivoQuiebre: campos.mQuiebre.value,
    motivoCliente: campos.Musuario.value,
    fecha: campos.Fecha.value,
    franjaAgenda: campos.Franja.value,
    gpsActivo: campos.gps.value,
    soporteFotografico: campos.SF.value,
    fallaChatbot: campos.FC.checked,
    suspenderOrden: campos.sus.checked,
    nombreAsesor: campos.NomAgent.value,
    agentAsesor: `agent_${campos.Agent.value}`,
    direccionAgendador: campos.direccionSistema.value,
    direcionenRecibo: campos.resultado.value,
  };
}

// Funci√≥n para generar textos base
function generarTextosBase(valores) {
  return {
    titularContacto: `Titular ${valores.nombreTitular} se marca al n√∫mero ${valores.numeroTitular}`,
    gestion: `. Gestionado por ${valores.nombreAsesor} ${valores.agentAsesor}.`,
    fechaFormateada: FormatearFecha(valores.fecha),
    texto: `LINEA RESCATE Se comunica ${valores.trabajador} informando que ${valores.motivoTecnico.value} `,
  };
}

function procesarCasoIncumplimiento(valores, textos) {
  let notaGenerada = "";
  let mensajeChatbot = "";
  const textoSinContacto = obtenerTextoSinContacto(valores.contactoConTitular);
  let texto = textos.texto + mensajeChatbot + ` ${textos.titularContacto} `;

  if (valores.trabajador === "t√©cnico") {
    mensajeChatbot = valores.fallaChatbot
      ? "Se valida soporte por falla reportada en chatbot"
      : "Se valida chatbot ok.";

    if (valores.contingenciaActiva) {
      valores.contactoConTitular = "...";
      notaGenerada = "POR CONTINGENCIA se deja orden pendiente en aplicativos";
    } else {
      if (esSinContacto(valores.contactoConTitular)) {
        notaGenerada = `${textoSinContacto}, Se Valida GPS ${valores.gpsActivo} Se Valida SOPORTE FOTOGR√ÅFICO ${valores.soporteFotografico}`;
        if (valores.gpsActivo === "OK" && valores.soporteFotografico === "OK") {
          notaGenerada +=
            " Se deja orden pendiente en aplicativos por no contacto con cliente";
        } else {
          notaGenerada +=
            " Se le indica a t√©cnico dirigirse al predio y Subir Soporte fotogr√°fico";
        }
      } else if (valores.contactoConTitular === "2") {
        notaGenerada += ` contesta e indica que ${valores.motivoCliente}`;
        if (valores.aLaEsperadeInstalacion) {
          notaGenerada +=
            " indica que esta a la espera de instalaci√≥n, valida datos correctos";
        } else if (!valores.suspenderOrden) {
          notaGenerada += "se deja orden pendiente por agendar";
        } else {
          notaGenerada += ` se reagenda para ${textos.fechaFormateada} En la franja ${valores.franjaAgenda}`;
        }
      }
    }
  }
  return texto + notaGenerada;
}

// Funci√≥n para procesar caso de agenda
function procesarCasoAgenda(valores, textos) {
  let notaGenerada = "";
  let mensajeChatbot = "";
  const textoSinContacto = obtenerTextoSinContacto(valores.contactoConTitular);
  const agendaNota = ` se reagenda orden para el dia ${textos.fechaFormateada} en la franja ${valores.franjaAgenda} segun indicaci√≥n de t√©cnico.`;

  if (valores.trabajador === "t√©cnico") {
    mensajeChatbot = valores.fallaChatbot
      ? "Se valida soporte por falla reportada en chatbot"
      : "Se valida chatbot ok.";

    if (valores.contingenciaActiva) {
      valores.contactoConTitular = "...";
      notaGenerada = valores.suspenderOrden
        ? "POR CONTINGENCIA se deja orden pendiente en aplicativos."
        : ` POR CONTINGENCIA ${agendaNota}`;
    }
  }

  let texto =
    textos.texto +
    mensajeChatbot +
    ` ${textos.titularContacto} ${valores.motivoCliente} `;

  if (esSinContacto(valores.contactoConTitular)) {
    if (valores.trabajador === "gestor") {
      notaGenerada = `${textoSinContacto} se le indica a gestor que intente mas tarde para proceder con la gesti√≥n.`;
    } else {
      notaGenerada = `${textoSinContacto}, Se Valida GPS ${valores.gpsActivo} Se Valida SOPORTE FOTOGR√ÅFICO ${valores.soporteFotografico}`;

      if (valores.gpsActivo === "OK" && valores.soporteFotografico === "OK") {
        notaGenerada += valores.suspenderOrden
          ? " Se deja orden pendiente por reagendar."
          : agendaNota;
      } else {
        notaGenerada +=
          " Se le indica a t√©cnico dirigirse al predio y Subir Soporte fotogr√°fico.";
      }
    }
  } else if (valores.contactoConTitular === "2") {
    if (valores.aLaEsperadeInstalacion) {
      notaGenerada =
        "indica que esta a la espera de instalaci√≥n, valida datos correctos.";
    } else if (valores.suspenderOrden) {
      notaGenerada = "se deja orden pendiente por agendar.";
    } else {
      notaGenerada = ` se reagenda para ${textos.fechaFormateada} En la franja ${valores.franjaAgenda}`;
    }
  }

  return texto + notaGenerada;
}

// Funci√≥n para procesar caso de quiebre
function procesarCasoQuiebre(valores, textos) {
  const textoSinContacto = obtenerTextoSinContacto(valores.contactoConTitular);
  let notaGenerada = "";
  let mensajeChatbot = "";
  let prefijoQC = ""; // Para manejar el prefijo QC al inicio

  if (valores.trabajador === "t√©cnico") {
    mensajeChatbot = valores.fallaChatbot
      ? " Se valida soporte por falla reportada en chatbot."
      : " Se valida chatbot ok.";

    if (valores.contingenciaActiva) {
      valores.contactoConTitular = "...";
      notaGenerada =
        " POR CONTINGENCIA se deja orden suspendida en aplicativos";
    } else {
      if (
        esSinContacto(valores.contactoConTitular) ||
        valores.contactoConTitular === "..."
      ) {
        if (valores.trabajador === "gestor") {
          notaGenerada = ` ${textoSinContacto} se le indica a gestor que intente mas tarde para proceder con la gesti√≥n.`;
        } else {
          if (
            valores.gpsActivo === "OK" &&
            valores.soporteFotografico === "OK"
          ) {
            // QC y motivo van al inicio
            prefijoQC = `QC - ${valores.motivoQuiebre} - `;
            notaGenerada = `${textoSinContacto}. Se valida SOPORTE FOTOGR√ÅFICO ${valores.soporteFotografico}. Se valida GPS ${valores.gpsActivo}. Se deja orden suspendida en aplicativos.`;
          } else {
            notaGenerada = ` ${textoSinContacto}. Se valida GPS ${valores.gpsActivo}. Se valida SOPORTE FOTOGR√ÅFICO ${valores.soporteFotografico}. Se le indica al t√©cnico dirigirse al predio y subir soporte fotogr√°fico.`;
          }
        }
      } else if (valores.contactoConTitular === "2") {
        const motivosEspeciales = [
          "TEL√âFONO DEL CLIENTE ERRADO",
          "GESTI√ìN COMERCIAL/CLIENTE ACEPTA INSTALACI√ìN",
          "GESTI√ìN COMERCIAL/CLIENTE SOLICITA LLAMAR EN 10 MIN",
        ];

        if (
          valores.aLaEsperadeInstalacion ||
          motivosEspeciales.includes(valores.motivoQuiebre)
        ) {
          return procesarMotivoEspecial(valores, textos);
        } else {
          // QC y motivo van al inicio
          prefijoQC = `QC - ${valores.motivoQuiebre} - `;
          notaGenerada = valores.suspenderOrden
            ? `${valores.motivoCliente}. Se deja orden suspendida en aplicativos.`
            : `${valores.motivoCliente}. Se hace objeci√≥n pero desiste, valida datos, se procede a quebrar orden.`;
        }
      }
    }
  }

  let textoFinal;
  if (prefijoQC) {
    // Si hay prefijo QC, restructurar completamente la oraci√≥n
    textoFinal = `${prefijoQC}${textos.texto}${mensajeChatbot} ${textos.titularContacto} ${notaGenerada}`;
  } else {
    // Si no hay prefijo QC, usar la estructura normal
    textoFinal = `${textos.texto}${mensajeChatbot} ${textos.titularContacto} ${notaGenerada}`;
  }

  return textoFinal;
}
// Funci√≥n auxiliar para procesar motivos especiales en quiebre
function procesarMotivoEspecial(valores, textos) {
  const mensajeChatbot = valores.fallaChatbot
    ? " Se valida soporte por falla reportada en chatbot."
    : " Se valida chatbot ok.";

  const textoBase =
    textos.texto + mensajeChatbot + ` ${textos.titularContacto} `;

  if (
    valores.aLaEsperadeInstalacion ||
    valores.motivoQuiebre === "GESTI√ìN COMERCIAL/CLIENTE ACEPTA INSTALACI√ìN"
  ) {
    const motivoTexto =
      valores.motivoCliente && valores.motivoCliente.trim() !== ""
        ? valores.motivoCliente
        : "contesta";

    return (
      textoBase +
      `${motivoTexto}. Se hace objeci√≥n, acepta instalaci√≥n y valida datos correctos.`
    );
  }

  if (
    valores.motivoQuiebre ===
    "GESTI√ìN COMERCIAL/CLIENTE SOLICITA LLAMAR EN 10 MIN"
  ) {
    return (
      textoBase +
      `${valores.motivoCliente}. Solicita que lo llamen en 10 minutos.`
    );
  }

  if (valores.motivoQuiebre === "TEL√âFONO DEL CLIENTE ERRADO") {
    if (valores.trabajador === "gestor") {
      return `QC -${textoBase} ${valores.motivoCliente}. ${valores.motivoQuiebre} - Se indica que debe enviar t√©cnico a predio para poder suspender la orden.`;
    } else {
      return `QC -${textoBase}  ${valores.motivoCliente}.  ${valores.motivoQuiebre} - Se valida SOPORTE FOTOGR√ÅFICO OK, se valida GPS OK, se procede a suspender orden.`;
    }
  }

  return textoBase;
}

// Funci√≥n para procesar caso de soporte no aplica
function procesarCasoSoporteNoAplica(valores, textos) {
  const soporteNoAplica = document.querySelector("#noSoporte").value;
  const tipoJornada = document.querySelector("#tipoJornada")?.value || null;
  const mensajesCaso7 = {
    AM: ", se valida orden se encuentra en franja AM se le indica que en linea rescate solo gestionamos ordenes en AM m√°ximo hasta las 1 pm, se le indica a t√©cnico validar con su gestor",
    PM: ", se valida y orden esta en PM se indica que ordenes pm solo se pueden atender despues de medio dia, se le indica a t√©cnico validar con su gestor",
  };

  const mensajes = {
    1: "Se valida que el t√©cnico no ha realizado el proceso en el chatbot. Se le indica que debe completarlo antes de comunicarse con la l√≠nea y, en caso de falla, reportarlo con su gestor para que sea escalado a Centro Comando. Se brinda ticket.",

    2: "Se valida que el t√©cnico no ha esperado respuesta del chatbot. Se le recuerdan los par√°metros del aplicativo que debe tener en cuenta antes de comunicarse con la l√≠nea. Si persiste el error, debe reportarlo a Centro Comando. Se brinda ticket.",

    3: "Se entrega ticket.",

    4: `${textos.titularContacto} contesta ${valores.motivoCliente}. Se le informa que en L√≠nea de Rescate no se gestionan √≥rdenes por falta de materiales. Debe realizar autogesti√≥n o comunicarse con su gestor.`,

    5: `${textos.titularContacto} contesta ${valores.motivoCliente}. Se le indica que esta gesti√≥n no se realiza a trav√©s de L√≠nea de Rescate. Debe validar con su gestor o con cierre controlado.`,

    6: `${textos.titularContacto} contesta ${valores.motivoCliente}. Se le informa que en caso de lluvias, la gesti√≥n debe realizarla a trav√©s de su gestor o mediante autogesti√≥n, ya que no se gestiona por L√≠nea de Rescate.`,

    7: mensajesCaso7[tipoJornada],

    8: "Se valida que la orden se encuentra en otro estado. Se le informa al t√©cnico que no es posible gestionarla desde L√≠nea de Rescate y debe validarlo con su gestor.",

    9: `${textos.titularContacto} contesta ${valores.motivoCliente}. Se le indica que si no puede llegar al predio, debe gestionar con su gestor o realizar autogesti√≥n, ya que no se atiende por L√≠nea de Rescate.`,

    10: "Se le informa que debe comunicarse con su gestor o realizar autogesti√≥n, ya que este tipo de gesti√≥n no se realiza por L√≠nea de Rescate.",

    11: `${textos.titularContacto} contesta ${valores.motivoCliente}. Se le indica que este proceso no se realiza por L√≠nea de Rescate y debe gestionarlo con su gestor o con cierre controlado.`,

    12: "Se valida que la orden est√° programada en franja AM. Se informa que el cambio de franja solo puede realizarse hasta las 12:00 p.m. desde L√≠nea de Rescate. Se le sugiere hacer autogesti√≥n o contactar a su gestor.",

    13: `${textos.titularContacto} contesta ${valores.motivoCliente}. Se le indica que debe hacer autogesti√≥n debido a direcci√≥n errada.`,

    14: `${textos.titularContacto} ${valores.motivoCliente}. Se solicita la baja de perfil en Speedy.`,

    15: "Se valida que la orden corresponde a una aver√≠a. Se informa que este tipo de gestiones no se realizan por L√≠nea de Rescate y debe comunicarse con su gestor o cierre controlado.",

    16: "Se indica que en L√≠nea de Rescate no se gestiona el caso cuando el cliente ya no desea el traslado porque permanece en el mismo predio y no lo necesita. Debe comunicarse con su gestor o realizar autogesti√≥n.",
  };

  return textos.texto + mensajes[soporteNoAplica];
}

// Funci√≥n para procesar caso de gesti√≥n de decos
function procesarCasoGestionDecos(valores, textos) {
  const textoSinContacto = obtenerTextoSinContacto(valores.contactoConTitular);
  const mensajeChatbot = valores.fallaChatbot
    ? ", se valida soporte por falla reportada en chatbot"
    : ", se valida chatbot ok.";

  let texto =
    textos.texto +
    mensajeChatbot +
    ` ${textos.titularContacto} ${valores.motivoCliente}`;

  if (valores.contactoConTitular === "2") {
    texto += " se valida datos correctos y se actualiza TAG de equipos";
  } else if (esSinContacto(valores.contactoConTitular)) {
    texto += ` ${textoSinContacto} se indica a t√©cnico que le diga al titular que este pendiente de la llamada e intente nuevamente`;
  }

  return texto;
}

// Funci√≥n para procesar caso de direcci√≥n piloto
function procesarCasoDireccionPiloto(valores, textos) {
  /* // Verificar si la direcci√≥n no es legible
  const direccionNoLegible = document.getElementById("direccionNoLegible");
  
  if (direccionNoLegible && direccionNoLegible.checked) {
    // ‚úÖ CASO: DIRECCI√ìN NO LEGIBLE
    const textoNoLegible = valores.direcionenRecibo || "DIRECCION NO ES LEGIBLE";
    return textos.texto + ` ${textoNoLegible}, por lo cual NO se acepta el recibo p√∫blico`;
  } */
  
  // ‚úÖ CASO: DIRECCI√ìN LEGIBLE
  // Determinar respuesta seg√∫n si acepta o no el recibo
  
  let respuesta = "";
if (valores.aceptarRecibo) {
  respuesta = "SI se da aceptaci√≥n al recibo publico";
} else if (valores.direccionNoLegible) {
  respuesta = "NO se acepta el recibo p√∫blico porque la direcci√≥n no es legible";
} else {
  respuesta = "";
}
  
  let sistema = (valores.direccionAgendador && `y en sistema est√° ${valores.direccionAgendador}`) 
  || "";

return (
  textos.texto +
  ` ${valores.direcionenRecibo || ""} ${sistema} ${respuesta}`
);
}


// Funci√≥n principal
function crearNota() {
  const valores = obtenerValoresFormulario();
  const textos = generarTextosBase(valores);
  const textoNota = document.getElementById("textoNota");
  let textoFinal = "";

  switch (valores.motivoLlamada) {
    case "0": // incumplimiento
      textoFinal = procesarCasoIncumplimiento(valores, textos);
      break;
    case "1": // agendar
      textoFinal = procesarCasoAgenda(valores, textos);
      break;
    case "2": // quiebre
      textoFinal = procesarCasoQuiebre(valores, textos);
      break;
    case "3": // soporte no aplica
      textoFinal = procesarCasoSoporteNoAplica(valores, textos);
      break;
    case "4": // Gesti√≥n de decos
      textoFinal = procesarCasoGestionDecos(valores, textos);
      break;
    case "5": // Direcci√≥n piloto
      textoFinal = procesarCasoDireccionPiloto(valores, textos);
      break;
    case "6": // Llamada ca√≠da
      textoFinal =
        textos.texto + " y se cae la llamada sin poder validar la informaci√≥n";
      break;
    default:
      textoFinal = textos.texto;
  }

  textoFinal += textos.gestion;
  textoFinal = limpiarTexto(textoFinal);

  // Procesar el texto con la funci√≥n de Nota Aplicativos
  if (typeof procesarTextoNotaAplicativos === "function") {
    textoFinal = procesarTextoNotaAplicativos(textoFinal);
  }

  textoNota.value = textoFinal;
}

// ===========================================
// MANEJADORES DE CAMBIO EN OPCIONES DE FORMULARIO
// ===========================================

// Lista de todas las secciones o elementos visuales que se pueden mostrar/ocultar en la aplicacion
const todosLosElementos = [
  "#MotivoTec",
  "#MoQuiebre",
  "#Musuariod",
  "#fecha",
  "#GPS",
  "#Soporte",
  "#contingencia",
  "#Acepta",
  "#fallaChatbot",
  "#Titular",
  "#contacto",
  "#contacto1",
  "#suspender",
  "#notaAplicativos",
  "#DRP",
  "#seccionDireccionSistema",
  "#jornadaSelect",
];

function aplicarDisplay(selectores, displayValue) {
  (selectores || []).forEach((selector) => {
    const elemento = document.querySelector(selector);
    if (elemento) {
      elemento.style.display = displayValue;
    }
  });
}

// Funci√≥n que acepta elementos base que siempre se muestran
function mostrarSoloElementos(configuracion, elementosBase = {}) {
  // Ocultar todos primero
  aplicarDisplay(todosLosElementos, "none");

  // Mostrar elementos base
  aplicarDisplay(elementosBase.block, "block");
  aplicarDisplay(elementosBase.flex, "flex");

  // Mostrar elementos de la configuraci√≥n espec√≠fica
  aplicarDisplay(configuracion.block, "block");
  aplicarDisplay(configuracion.flex, "flex");
}

function toggleElementStat(elementId, isDisabled) {
  const element = document.getElementById(elementId);
  if (element) {
    element.disabled = isDisabled;
  }
}

// Funci√≥n para obtener valores del formulario para manejarCambio
function obtenerValoresManejarCambio() {
  return {
    mLlamada: document.querySelector("#Motivo").value,
    soporteNA: document.querySelector("#noSoporte").value,
    contacto: document.querySelector("#Contacto").value,
    trabajador: document.querySelector("#rol").value,
    contingencia: document.getElementById("Contingencia").checked,
    aceptaInstalar: document.getElementById("Aceptains").checked,
    aceptarRecibo: document.getElementById("aceptarRecibo").checked,
    suspender: document.getElementById("sus").checked,
    direccionNoLegible : document.getElementById("direccionNoLegible").checked
  };
}
function manejarCasoIncumplimiento(valores) {
  cambiarColorFondo("#0314f8ff");

  // Elementos que SIEMPRE se muestran en incumplimiento
  const elementosBaseIncumplimiento = {
    block: ["#contingencia", "#contacto", "#contacto1", "#MotivoTec"],
    flex: ["#fallaChatbot", "#Titular"],
  };

  toggleElementStat("Contacto", false);

  if (valores.trabajador === "t√©cnico") {
    if (valores.contingencia) {
      // SOLO cuando contingencia est√° ACTIVA, bloquear el select
      toggleElementStat("Contacto", true);
      mostrarSoloElementos(
        {
          flex: ["#notaAplicativos"],
        },
        elementosBaseIncumplimiento
      );
    } else {
      toggleElementStat("Contacto", false);

      if (valores.contacto === "...") {
        mostrarSoloElementos(elementosBaseIncumplimiento);
      } else if (esSinContacto(valores.contacto)) {
        mostrarSoloElementos(
          {
            flex: ["#GPS"],
          },
          elementosBaseIncumplimiento
        );
      } else {
        if (!valores.suspender && !valores.aceptaInstalar) {
          mostrarSoloElementos(
            {
              block: ["#Musuariod"],
              flex: ["#suspender", "#Acepta"],
            },
            elementosBaseIncumplimiento
          );
        } else if (valores.suspender && !valores.aceptaInstalar) {
          mostrarSoloElementos(
            {
              block: ["#Musuariod", "#fecha"],
              flex: ["#suspender"],
            },
            elementosBaseIncumplimiento
          );
        } else if (!valores.suspender && valores.aceptaInstalar) {
          mostrarSoloElementos(
            {
              block: ["#Musuariod"],
              flex: ["#Acepta"],
            },
            elementosBaseIncumplimiento
          );
        }
      }
    }
  } else {
    // Si no es t√©cnico, bloquear pero con mensaje
    toggleElementStat("Contacto", true);
    alert(
      `No se puede gestionar incumplimiento desde el rol ${valores.trabajador}`,
      2
    );
    return;
  }

  ValueMostrar(
    "#Mtecnico",
    "se encuentra en predio y no logra contacto con cliente,  "
  );
}

// Funci√≥n para manejar caso agendamiento en manejarCambio
function manejarCasoAgenda(valores) {
  cambiarColorFondo("#2d8215");

  // Elementos que SIEMPRE se muestran en agenda
  const elementosBaseAgenda = {
    block: ["#contingencia", "#contacto", "#contacto1"],
    flex: ["#fallaChatbot", "#Titular"],
  };

  toggleElementStat("Contacto", false);

  if (
    valores.trabajador === "gestor" &&
    (valores.contacto === "..." || esSinContacto(valores.contacto))
  ) {
    mostrarSoloElementos(
      {
        block: ["#MotivoTec"],
      },
      elementosBaseAgenda
    );
  } else if (
    esSinContacto(valores.contacto) &&
    valores.trabajador === "t√©cnico" &&
    !valores.contingencia
  ) {
    mostrarSoloElementos(
      {
        block: ["#MotivoTec", "#fecha"],
        flex: ["#GPS", "#suspender"],
      },
      elementosBaseAgenda
    );

    // Reordenar elementos GPS y fecha
    const primerElemento = document.querySelector("GPS");
    const segundoElemento = document.querySelector("fecha");
    ordenarElementos(primerElemento, segundoElemento);

    if (valores.suspender) {
      mostrarSoloElementos(
        {
          block: ["#MotivoTec"],
          flex: ["#GPS", "#suspender"],
        },
        elementosBaseAgenda
      );
    }
  } else if (valores.contacto === "2" && !valores.contingencia) {
    if (valores.aceptaInstalar && !valores.suspender) {
      mostrarSoloElementos(
        {
          flex: ["#Acepta"],
          block: ["#MotivoTec", "#Musuariod"],
        },
        elementosBaseAgenda
      );
    } else if (!valores.aceptaInstalar && valores.suspender) {
      mostrarSoloElementos(
        {
          block: ["#MotivoTec", "#Musuariod"],
          flex: ["#suspender"],
        },
        elementosBaseAgenda
      );
    } else {
      mostrarSoloElementos(
        {
          flex: ["#suspender", "#Acepta"],
          block: ["#MotivoTec", "#Musuariod", "#fecha"],
        },
        elementosBaseAgenda
      );
    }
  } else if (valores.contingencia) {
    // SOLO cuando contingencia est√° ACTIVA, bloquear el select
    toggleElementStat("Contacto", true);

    if (valores.contacto !== "1") {
      mostrarSoloElementos(
        {
          block: ["#MotivoTec", "#fecha"],
          flex: ["#suspender", "#notaAplicativos"],
        },
        elementosBaseAgenda
      );

      if (valores.suspender) {
        mostrarSoloElementos(
          {
            block: ["#MotivoTec"],
            flex: ["#suspender", "#notaAplicativos"],
          },
          elementosBaseAgenda
        );
      }
    } else {
      mostrarSoloElementos(
        {
          block: ["#MotivoTec"],
        },
        elementosBaseAgenda
      );
    }
  } else {
    mostrarSoloElementos(
      {
        block: ["#MotivoTec"],
      },
      elementosBaseAgenda
    );
    toggleElementStat("Contacto", false);
  }

  ValueMostrar("#Mtecnico", "titular solicita agendar la orden para el d√≠a ");
}

// Funci√≥n para manejar caso quiebre en manejarCambio
function manejarCasoQuiebre(valores) {
  cambiarColorFondo("#dc4c4c");

  // Elementos que SIEMPRE se muestran en quiebre
  const elementosBaseQuiebre = {
    block: ["#contingencia", "#contacto", "#contacto1"],
    flex: ["#Titular", "#fallaChatbot"],
  };

  toggleElementStat("Contacto", false);

  if (
    valores.trabajador === "gestor" &&
    (valores.contacto === "..." || esSinContacto(valores.contacto))
  ) {
    mostrarSoloElementos(
      {
        block: ["#MotivoTec"],
      },
      elementosBaseQuiebre
    );
  } else if (
    valores.trabajador === "t√©cnico" &&
    esSinContacto(valores.contacto) &&
    !valores.contingencia
  ) {
    mostrarSoloElementos(
      {
        block: ["#MoQuiebre", "#MotivoTec"],
        flex: ["#GPS"],
      },
      elementosBaseQuiebre
    );
  } else if (valores.contacto === "2" && !valores.contingencia) {
    mostrarSoloElementos(
      {
        block: ["#MotivoTec", "#Musuariod", "#MoQuiebre"],
        flex: ["#suspender", "#Acepta"],
      },
      elementosBaseQuiebre
    );
    ordenarElementos(
      document.querySelector("#contacto", "#contacto1"),
      document.querySelector("#Musuariod")
    );
  } else if (valores.contingencia) {
    // SOLO cuando contingencia est√° ACTIVA, bloquear el select
    toggleElementStat("Contacto", true);
    mostrarSoloElementos(
      {
        block: ["#MotivoTec", "#MoQuiebre",],
        flex: ["#notaAplicativos"],
      },
      elementosBaseQuiebre
    );
  } else {
    mostrarSoloElementos(
      {
        block: ["#MotivoTec",],
      },
      elementosBaseQuiebre
    );
    toggleElementStat("Contacto", false);
  }

  ValueMostrar("#Mtecnico", "titular desea cancelar el servicio por ");
}

// Funci√≥n para manejar caso soporte no aplica en manejarCambio
function manejarCasoSoporteNoAplica(valores) {
  cambiarColorFondo("#F18F13");

  const soportesConTitular = ["11", "6", "13", "14", "3", "9", "4", "16"];

  if (soportesConTitular.includes(valores.soporteNA)) {
    mostrarSoloElementos({
      block: ["#MotivoTec", "#Musuariod", "#Soporte"],
      flex: ["#Titular"],
    });
  } else {
    mostrarSoloElementos({
      block: ["#MotivoTec", "#Soporte"],
    });
    if (valores.soporteNA === "7") {
      mostrarSoloElementos({
        block: ["#MotivoTec", "#Soporte"],
        flex: ["#jornadaSelect"],
      });
    }
  }

  ValueMostrar("#Mtecnico", "");
}

function manejarCasoDecos(valores) {
  const elementosBaseDecos = {
    block: ["#MotivoTec", "#contacto", "#contacto1"],
    flex: ["#Titular", "#fallaChatbot"],
  };
  cambiarColorFondo("#00ccfe");
  mostrarSoloElementos(elementosBaseDecos);
  if (valores.contacto === "2") {
    mostrarSoloElementos(
      {
        block: ["#Musuariod"],
      },
      elementosBaseDecos
    );
  }
  ValueMostrar(
    "#Mtecnico",
    "titular solicita adicionar un decodificador a la orden para un total de "
  );
}
// duncion direcion piloto
function manejarCasoDireccionPiloto(valores) {
  // Configuraci√≥n visual inicial
  cambiarColorFondo("#c3c3c3");
  setInnerHTML("#labelAcepta", "ACEPTAR RECIBO");
  const elemntosBasePiloto= {
     block: ["#MotivoTec", "#DRP"],
     flex : [ "#seccionDireccionSistema",]
  }
  mostrarSoloElementos(elemntosBasePiloto
   );

  // Mostrar/ocultar campos seg√∫n si acepta el recibo
  if (!valores.aceptarRecibo) {
    setInnerHTML("#TMusuario", "NO SE ACEPTA PORQUE?");
  }

  if (valores.direccionNoLegible) {
    mostrarSoloElementos( elemntosBasePiloto
      
      /* {
      block: ["#MotivoTec", "#Musuariod"],
       flex : [ "#seccionDireccionSistema",]
    } */);
  }

  ValueMostrar(
    "#Mtecnico",
    "requieren correcci√≥n en la direcci√≥n, "
  );
}

// Funci√≥n principal para manejarCambio
function manejarCambio(e) {
  Actualizartodo();
  setInnerHTML("#TMusuario", "MOTIVO USUARIO");
  setInnerHTML("#labelAcepta", "CLIENTE ACEPTA INSTALAR");
  setInnerHTML("#labelSuspender", "SUSPENDER ORDEN");

  const valores = obtenerValoresManejarCambio();

  if (Actualizartodo) {
    switch (valores.mLlamada) {
      case "0": // incumplimiento
        manejarCasoIncumplimiento(valores);
        setInnerHTML("#labelAcepta", "CLIENTE A LA ESPERA");
        setInnerHTML("#labelSuspender", "AGENDAR");
        break;
      case "1": // agendar
        manejarCasoAgenda(valores);
        break;
      case "2": // quiebres
        manejarCasoQuiebre(valores);
        break;
      case "3": // soporte no aplica
        manejarCasoSoporteNoAplica(valores);
        break;
      case "4": // Gesti√≥n decos
        manejarCasoDecos(valores);
        break;
      case "5": // Gesti√≥n piloto
        manejarCasoDireccionPiloto(valores)
        break;
      case "6": // llamada ca√≠da
        cambiarColorFondo("#9513f1");
        mostrarSoloElementos({ block: ["#MotivoTec"] });
        ValueMostrar("#Mtecnico", "");
        break;
      default:
        cambiarColorFondo("#1392F1");
        mostrarSoloElementos({ block: ["#MotivoTec"] });
        ValueMostrar("#Mtecnico", "");
    }
  }

  crearNota();
}

// Funci√≥n para procesar el texto y eliminar "POR CONTINGENCIA" y "se marca al n√∫mero"
function procesarTextoNotaAplicativos(texto) {
  const checkbox = document.getElementById("notaApp");
  if (checkbox && checkbox.checked) {
    let cleanedText = texto.replace(/POR CONTINGENCIA/gi, "").trim();
    cleanedText = cleanedText.replace(/se marca al /gi, "").trim();

    // Limpiar espacios extras que puedan quedar
    return cleanedText.replace(/\s+/g, " ").trim();
  }
  return texto;
}

// ===========================================
// VALIDACI√ìN PARA COPIAR NOTA
// ===========================================

function validarAntesDeCopirarNota() {
  const errores = [];
  const motivoLlamada = document.getElementById("Motivo").value;
  const contingenciaActiva = document.getElementById("Contingencia")?.checked;
  const contacto = document.getElementById("Contacto")?.value;
  const clienteAgenda = document.getElementById("sus")?.checked; // ‚úÖ Agregado

  // Campos espec√≠ficos seg√∫n el motivo
  const camposPorMotivo = {
    0: {
      // ‚úÖ INCUMPLIMIENTO CORREGIDO
      NumTitular: "N√∫mero de tel√©fono del titular",
      NomTitular: "Nombre del titular",
      // Solo validar contacto si NO hay contingencia activa
      ...(contingenciaActiva ? {} : { Contacto: "Tipo de contacto" }),
      // ‚úÖ CORRECCI√ìN: Fecha y Franja solo si NO hay contingencia Y contacto exitoso Y cliente agenda
      ...(!contingenciaActiva && contacto === "2" && clienteAgenda
        ? { 
            Fecha: "Fecha de agenda", 
            Franja: "Franja horaria" 
          }
        : {}),
      // Motivo usuario solo si hay contacto exitoso y no hay contingencia
      ...(!contingenciaActiva && contacto === "2"
        ? { Musuario: "Motivo del cliente" }
        : {}),
    },
    1: {
      // ‚úÖ AGENDA CORREGIDO
      NumTitular: "N√∫mero de tel√©fono del titular",
      NomTitular: "Nombre del titular",
      ...(contingenciaActiva ? {} : { Contacto: "Tipo de contacto" }),
      // ‚úÖ CORRECCI√ìN: Fecha y Franja SIEMPRE se piden EXCEPTO si Aceptains O sus est√°n marcados
      ...(!document.getElementById("Aceptains")?.checked && !document.getElementById("sus")?.checked
        ? { Fecha: "Fecha de agenda", Franja: "Franja horaria" }
        : {}),
    },
    2: {
      // Quiebre (sin cambios)
      NumTitular: "N√∫mero de tel√©fono del titular",
      NomTitular: "Nombre del titular",
      ...(contingenciaActiva ? {} : { Contacto: "Tipo de contacto" }),
      mQuiebre: "Motivo de quiebre",
    },
    3: {
      // ‚úÖ SOPORTE NO APLICA CORREGIDO - NO se requiere nombre ni n√∫mero de titular
      noSoporte: "Tipo de soporte",
    },
    4: {
      // Gesti√≥n decos (sin cambios)
      NumTitular: "N√∫mero de tel√©fono del titular",
      NomTitular: "Nombre del titular",
      ...(contingenciaActiva ? {} : { Contacto: "Tipo de contacto" }),
    },
    5: {
      // Direcci√≥n piloto (sin cambios)
      direccionSistema: "Direcci√≥n del sistema",
      resultado: "Direcci√≥n de recibo",
    },
    6: {
      // Llamada ca√≠da (sin cambios)
    },
  };

  // Validar campos del motivo actual
  const camposRequeridos = camposPorMotivo[motivoLlamada] || {};
  Object.entries(camposRequeridos).forEach(([campo, descripcion]) => {
    const elemento = document.getElementById(campo);
    if (
      !elemento ||
      !elemento.value ||
      elemento.value.trim() === "" ||
      elemento.value === "..."
    ) {
      errores.push(`‚ùå Falta: ${descripcion}`);
    }
  });

  // Validaciones condicionales espec√≠ficas
  errores.push(
    ...validarCamposCondicionales(motivoLlamada, contingenciaActiva)
  );

  return errores;
}

// ===========================================
// FUNCI√ìN AUXILIAR PARA VALIDACIONES CONDICIONALES
// ===========================================

function validarCamposCondicionales(motivoLlamada, contingenciaActiva) {
  const errores = [];
  const contacto = document.getElementById("Contacto")?.value;

  // Solo validar motivo del cliente si hay contacto exitoso y no hay contingencia
  if (contacto === "2" && !contingenciaActiva) {
    const motivoCliente = document.getElementById("Musuario")?.value;
    if (!motivoCliente || motivoCliente.trim() === "") {
      errores.push(
        "‚ùå Falta: Motivo del cliente (cuando hay contacto exitoso)"
      );
    }
  }

  // Validaciones espec√≠ficas por motivo
  switch (motivoLlamada) {
    case "2": // Quiebre
      if (contacto === "2" && !contingenciaActiva) {
        const motivoQuiebre = document.getElementById("mQuiebre")?.value;
        if (!motivoQuiebre || motivoQuiebre === "...") {
          errores.push("‚ùå Falta: Motivo espec√≠fico de quiebre");
        }
      }
      break;

    case "3": // Soporte no aplica
      const tipoSoporte = document.getElementById("noSoporte")?.value;
      // Validar jornada si es tipo 7
      if (tipoSoporte === "7") {
        const jornada = document.getElementById("tipoJornada")?.value;
        if (!jornada || jornada === "") {
          errores.push("‚ùå Falta: Tipo de jornada (AM/PM)");
        }
      }
      // Validar motivo usuario para ciertos tipos de soporte
      const soportesConMotivo = ["11", "6", "13", "14", "3", "9", "4"];
      if (soportesConMotivo.includes(tipoSoporte)) {
        const motivoUsuario = document.getElementById("Musuario")?.value;
        if (!motivoUsuario || motivoUsuario.trim() === "") {
          errores.push("‚ùå Falta: Motivo del usuario (para este tipo de soporte)");
        }
      }
      break;

    case "5": // Direcci√≥n piloto
      const aceptaRecibo = document.getElementById("aceptarRecibo")?.checked;
      if (!aceptaRecibo) {
        const motivoNoAcepta = document.getElementById("Musuario")?.value;
        if (!motivoNoAcepta || motivoNoAcepta.trim() === "") {
          errores.push("‚ùå Falta: Motivo por el cual no acepta el recibo");
        }
      }
      break;
  }
    return errores;
}

// ===========================================
// FUNCI√ìN FALTANTE PARA VALIDAR CAMPOS REQUERIDOS
// ===========================================
function esRequeridoYVacio(campo, motivoLlamada, contacto) {
  const elemento = document.getElementById(campo);
  if (!elemento) return false;

  const valor = elemento.value;
  const estaVacio = !valor || valor.trim() === "" || valor === "...";

  if (!estaVacio) return false; // Si no est√° vac√≠o, no necesita resaltado

  const contingenciaActiva = document.getElementById("Contingencia")?.checked;
  const clienteAgenda = document.getElementById("sus")?.checked; // ‚úÖ Agregado

  // Definir qu√© campos son requeridos seg√∫n el motivo
  const camposPorMotivo = {
    0: {
      // ‚úÖ INCUMPLIMIENTO CORREGIDO
      NumTitular: true,
      NomTitular: true,
      // Solo requerir contacto si NO hay contingencia activa
      Contacto: !contingenciaActiva,
      // ‚úÖ CORRECCI√ìN: Fecha y Franja solo si NO hay contingencia Y hay contacto exitoso Y cliente agenda
      Fecha: !contingenciaActiva && contacto === "2" && clienteAgenda,
      Franja: !contingenciaActiva && contacto === "2" && clienteAgenda,
      // Musuario solo si hay contacto exitoso y no hay contingencia
      Musuario: contacto === "2" && !contingenciaActiva,
    },
    1: {
      // ‚úÖ AGENDA CORREGIDO
      NumTitular: true,
      NomTitular: true,
      Contacto: !contingenciaActiva,
      // ‚úÖ CORRECCI√ìN: Fecha y Franja SIEMPRE se piden EXCEPTO si Aceptains O sus est√°n marcados
      Fecha: !document.getElementById("Aceptains")?.checked && !document.getElementById("sus")?.checked,
      Franja: !document.getElementById("Aceptains")?.checked && !document.getElementById("sus")?.checked,
      Musuario: contacto === "2" && !contingenciaActiva,
    },
    2: {
      // Quiebre (sin cambios)
      NumTitular: true,
      NomTitular: true,
      Contacto: !contingenciaActiva,
      mQuiebre: true,
      Musuario: contacto === "2" && !contingenciaActiva,
    },
    3: {
      // ‚úÖ SOPORTE NO APLICA CORREGIDO - NO se requiere nombre ni n√∫mero de titular
      noSoporte: true,
      tipoJornada: document.getElementById("noSoporte")?.value === "7",
      Musuario: ["11", "6", "13", "14", "3", "9", "4"].includes(
        document.getElementById("noSoporte")?.value
      ),
    },
    4: {
      // Gesti√≥n decos (sin cambios)
      NumTitular: true,
      NomTitular: true,
      Contacto: !contingenciaActiva,
      Musuario: contacto === "2" && !contingenciaActiva,
    },
    5: {
      // Direcci√≥n piloto (sin cambios)
      direccionSistema: true,
      resultado: true,
      Musuario: !document.getElementById("aceptarRecibo")?.checked,
    },
    6: {
      // Llamada ca√≠da (sin cambios)
    },
  };

  // Obtener la configuraci√≥n para el motivo actual
  const configuracion = camposPorMotivo[motivoLlamada] || {};

  // Verificar si este campo es requerido seg√∫n la configuraci√≥n
  return configuracion[campo] === true;
}
// ===========================================
// RESALTADO VISUAL DE CAMPOS FALTANTES
// ===========================================

function agregarEventListenersParaResaltado() {
  // Lista de todos los campos que pueden ser resaltados
  const camposParaMonitorear = [
    "NumTitular",
    "NomTitular",
    "Contacto",
    "Fecha",
    "Franja",
    "mQuiebre",
    "noSoporte",
    "direccionSistema",
    "resultado",
    "Musuario",
    "tipoJornada",
  ];

  camposParaMonitorear.forEach((campoId) => {
    const campo = document.getElementById(campoId);
    if (campo) {
      // Para inputs de texto, textarea, y selects
      campo.addEventListener("input", () => quitarResaltadoCampo(campo));
      campo.addEventListener("change", () => quitarResaltadoCampo(campo));
      campo.addEventListener("keydown", () => quitarResaltadoCampo(campo));

      // Para selects espec√≠ficamente (cuando cambia la selecci√≥n)
      if (campo.tagName === "SELECT") {
        campo.addEventListener("focus", () => {
          // Quitar resaltado inmediatamente al hacer focus en un select
          if (campo.classList.contains("campo-faltante")) {
            quitarResaltadoCampo(campo);
          }
        });
      }
    }
  });
}

function quitarResaltadoCampo(campo) {
  if (campo.classList.contains("campo-faltante")) {
    campo.classList.remove("campo-faltante", "primer-faltante");

    // Agregar efecto visual de "completado" brevemente
    campo.classList.add("campo-completado");
    setTimeout(() => {
      campo.classList.remove("campo-completado");
    }, 1500);
  }
}

function resaltarCamposFaltantes() {
  // Primero limpiar todos los resaltados anteriores
  document.querySelectorAll(".campo-faltante").forEach((el) => {
    el.classList.remove("campo-faltante", "primer-faltante");
  });

  // Obtener los errores actuales
  const errores = validarAntesDeCopirarNota();

  if (errores.length === 0) return; // Si no hay errores, no resaltar nada

  const motivoLlamada = document.getElementById("Motivo").value;
  const contacto = document.getElementById("Contacto")?.value;

  // Lista de todos los campos que podr√≠an necesitar resaltado
  const camposParaRevisar = [
    "NumTitular",
    "NomTitular",
    "Contacto",
    "Fecha",
    "Franja",
    "mQuiebre",
    "noSoporte",
    "direccionSistema",
    "resultado",
    "Musuario",
    "tipoJornada",
  ];

  let primerCampoEncontrado = false;

  // Resaltar campos que est√°n vac√≠os y son requeridos
  camposParaRevisar.forEach((campo) => {
    const elemento = document.getElementById(campo);
    if (elemento && esRequeridoYVacio(campo, motivoLlamada, contacto)) {
      elemento.classList.add("campo-faltante");

      // Hacer scroll suave al primer campo faltante
      if (!primerCampoEncontrado) {
        elemento.classList.add("primer-faltante");
        primerCampoEncontrado = true;
        setTimeout(() => {
          elemento.scrollIntoView({
            behavior: "smooth",
            block: "center",
          });
        }, 100);
      }
    }
  });
}

function copiarNotaConValidacion() {
  const errores = validarAntesDeCopirarNota();

  if (errores.length > 0) {
    // Resaltar campos faltantes
    resaltarCamposFaltantes();

    // Mostrar errores con mejor formato
    const mensajeHTML = `
      <div style="text-align: left; max-height: 300px; overflow-y: auto;">
        <p><strong>üö´ No se puede copiar la nota.</strong></p>
        <p>Por favor complete los siguientes campos:</p>
        <ul style="list-style: none; padding-left: 0;">
          ${errores
            .map(
              (error) =>
                `<li style="margin: 5px 0; color: #d63031;">${error}</li>`
            )
            .join("")}
        </ul>
        <hr style="margin: 15px 0;">
        <p style="font-size: 14px; color: #636e72;">
          üí° <em>Los campos faltantes est√°n resaltados en rojo y desaparecer√°n al escribir</em>
        </p>
      </div>
    `;

    Swal.fire({
      title: "‚ö†Ô∏è Campos Incompletos",
      html: mensajeHTML,
      icon: "warning",
      confirmButtonColor: "#d63031",
      confirmButtonText: "üìù Completar campos",
      allowOutsideClick: false,
      width: "500px",
    });

    return false;
  }

  // Si no hay errores, limpiar resaltados y copiar
  limpiarResaltados();

  const textoNota = document.getElementById("textoNota").value;
  copiarYAlertar(textoNota, alerta);
  return true;
}

// ===========================================
// FUNCI√ìN PARA LIMPIAR RESALTADOS MEJORADA
// ===========================================

function limpiarResaltados() {
  // Quitar todas las clases de resaltado con transici√≥n suave
  document
    .querySelectorAll(".campo-faltante, .campo-completado, .primer-faltante")
    .forEach((el) => {
      el.classList.remove(
        "campo-faltante",
        "campo-completado",
        "primer-faltante"
      );
    });
}

// ===========================================
// INICIALIZACI√ìN AUTOM√ÅTICA MEJORADA
// ===========================================

// Funci√≥n para inicializar todo el sistema de resaltado
function inicializarSistemaResaltado() {
  agregarEventListenersParaResaltado();
}

// Inicializar cuando el DOM est√© listo
document.addEventListener("DOMContentLoaded", function () {
  setTimeout(() => {
    inicializarSistemaResaltado();
  }, 100);
});

// Tambi√©n en window.onload por si acaso
window.addEventListener("load", function () {
  inicializarSistemaResaltado();
});

// ===========================================
// SISTEMA PARA DUPLICAR CONTACTOS EXACTOS - VERSI√ìN CORREGIDA
// ===========================================

let contadorContactosExactos = 1; // Empezamos en 1 porque ya existe el contacto principal
let funcionOriginalGuardada = null; // Variable para guardar la funci√≥n original solo una vez

// Funci√≥n para agregar un nuevo contacto (conectada al bot√≥n +)
function agregarNuevoContactoExacto() {
  contadorContactosExactos++;
  
  // Buscar el contenedor padre donde est√° el contacto original
  const contactoOriginal = document.getElementById('contacto1');
  if (!contactoOriginal) {
    console.error('‚ùå No se encontr√≥ el elemento con id "contacto1"');
    return false;
  }
  
  const rowPadre = contactoOriginal.closest('.row');
  if (!rowPadre) {
    console.error('‚ùå No se encontr√≥ el div.row padre');
    return false;
  }
  
  // Crear el nuevo HTML exacto
  const nuevoContactoHTML = crearContactoExactoHTML(contadorContactosExactos);
  
  // Insertar despu√©s del √∫ltimo contacto
  const ultimoContacto = document.querySelector('[data-contacto-id]:last-of-type');
  const elementoReferencia = ultimoContacto ? ultimoContacto.closest('.row') : rowPadre;
  
  elementoReferencia.insertAdjacentHTML('afterend', nuevoContactoHTML);
  
  // Inicializar event listeners para el nuevo contacto
  inicializarEventListenersContactoExacto(contadorContactosExactos);
  
  console.log(`‚úÖ Nuevo contacto exacto agregado: #${contadorContactosExactos}`);
  
  // Actualizar la nota SOLO si existe la funci√≥n
  if (typeof crearNota === 'function') {
    crearNota();
  }
  
  return contadorContactosExactos;
}

// Funci√≥n para crear el HTML exacto del nuevo contacto
function crearContactoExactoHTML(numero) {
  return `
    <div class="row" data-contacto-id="${numero}">
      <div class="col-12" id="contacto${numero}">
        <div class="row">
          <div class="col-5">
            <label for="NumTitular${numero}">Numero de Titular ${numero}</label>
            <input type="tel" class="form-control trans no-arrows" id="NumTitular${numero}" 
                   autocomplete="off" placeholder="N√∫mero de tel√©fono ${numero}">
          </div>
          <div class="col-5">
            <label for="Contacto${numero}">Hubo Contacto ${numero}</label>
            <select class="custom-select trans" id="Contacto${numero}">
              <option selected>...</option>
              <option value="2">Contacto</option>
              <option value="1">Sin Contacto</option>
              <option value="ocupado">L√≠nea ocupada</option>
              <option value="fuera_servicio">N√∫mero fuera de servicio</option>
              <option value="equivocado">N√∫mero equivocado</option>
              <option value="buzon">Contest√≥ buz√≥n de voz</option>
              <option value="cuelga">Cliente cuelga inmediatamente</option>
              <option value="tercero">Atiende tercera persona</option>
              <option value="rechaza_llamada">Rechaza la llamada</option>
            </select>
          </div>
          <div class="col-2 d-flex align-items-end">
            <button type="button" class="btn btn-danger btn-block" 
                    onclick="eliminarContactoExacto(${numero})" 
                    data-toggle="tooltip" data-placement="top" 
                    title="Eliminar contacto ${numero}">-</button>
          </div>
        </div>
      </div>
    </div>
  `;
}

// Funci√≥n para inicializar event listeners del nuevo contacto
function inicializarEventListenersContactoExacto(numero) {
  const numeroInput = document.getElementById(`NumTitular${numero}`);
  const contactoSelect = document.getElementById(`Contacto${numero}`);
  
  if (numeroInput) {
    numeroInput.addEventListener('input', function() {
      // Actualizar nota cuando cambie el n√∫mero
      if (typeof crearNota === 'function') {
        crearNota();
      }
    });
  }
  
  if (contactoSelect) {
    contactoSelect.addEventListener('change', function() {
      // Actualizar nota cuando cambie el tipo de contacto
      if (typeof crearNota === 'function') {
        crearNota();
      }
    });
  }
}

// Funci√≥n para eliminar un contacto espec√≠fico
function eliminarContactoExacto(numero) {
  const contactoRow = document.querySelector(`[data-contacto-id="${numero}"]`);
  if (contactoRow) {
    if (confirm(`¬øEst√°s seguro de eliminar el Contacto #${numero}?`)) {
      contactoRow.remove();
      console.log(`‚úÖ Contacto #${numero} eliminado`);
      
      // Actualizar la nota
      if (typeof crearNota === 'function') {
        crearNota();
      }
    }
  }
}

// Funci√≥n para obtener todos los contactos (original + adicionales)
function obtenerTodosLosContactosExactos() {
  const contactos = [];
  
  // Contacto original
  const numOriginal = document.getElementById('NumTitular')?.value || '';
  const contactoOriginal = document.getElementById('Contacto')?.value || '...';
  
  if (numOriginal.trim() && contactoOriginal !== '...') {
    contactos.push({
      numero: 1,
      telefono: numOriginal,
      tipoContacto: contactoOriginal,
      esOriginal: true
    });
  }
  
  // Contactos adicionales
  document.querySelectorAll('[data-contacto-id]').forEach(elemento => {
    const numero = elemento.getAttribute('data-contacto-id');
    const telefono = document.getElementById(`NumTitular${numero}`)?.value || '';
    const tipoContacto = document.getElementById(`Contacto${numero}`)?.value || '...';
    
    if (telefono.trim() && tipoContacto !== '...') {
      contactos.push({
        numero: parseInt(numero),
        telefono: telefono,
        tipoContacto: tipoContacto,
        esOriginal: false
      });
    }
  });
  
  return contactos;
}

// Funci√≥n para generar el texto de contactos concatenados para la nota
function generarTextoContactosConcatenados(nombreTitular) {
  const contactos = obtenerTodosLosContactosExactos();
  
  if (contactos.length === 0) {
    // Si no hay contactos v√°lidos, usar la l√≥gica original
    const numOriginal = document.getElementById('NumTitular')?.value || '';
    const contactoOriginal = document.getElementById('Contacto')?.value || '...';
    
    if (numOriginal.trim()) {
      if (contactoOriginal === '2') {
        return `Titular ${nombreTitular} se marca al n√∫mero ${numOriginal} contesta `;
      } else if (esSinContacto(contactoOriginal)) {
        const textoSinContacto = obtenerTextoSinContacto(contactoOriginal);
        return `Titular ${nombreTitular} se marca al n√∫mero ${numOriginal} ${textoSinContacto}`;
      }
    }
    
    return `Titular ${nombreTitular} se marca al n√∫mero `;
  }
  
  if (contactos.length === 1) {
    // Un solo contacto - usar l√≥gica original
    const contacto = contactos[0];
    
    if (contacto.tipoContacto === '2') {
      return `Titular ${nombreTitular} se marca al n√∫mero ${contacto.telefono} contesta `;
    } else if (esSinContacto(contacto.tipoContacto)) {
      const textoSinContacto = obtenerTextoSinContacto(contacto.tipoContacto);
      return `Titular ${nombreTitular} se marca al n√∫mero ${contacto.telefono} ${textoSinContacto}`;
    }
  }
  
  // M√∫ltiples contactos - concatenar
  let textoCompleto = `Titular ${nombreTitular} `;
  let hayContactoExitoso = false;
  let textoContactoExitoso = '';
  
  contactos.forEach((contacto, index) => {
    if (contacto.tipoContacto === '2') {
      hayContactoExitoso = true;
      textoContactoExitoso = `se marca al n√∫mero ${contacto.telefono} contesta `;
    } else if (esSinContacto(contacto.tipoContacto)) {
      const textoSinContacto = obtenerTextoSinContacto(contacto.tipoContacto);
      
      if (index === 0) {
        textoCompleto += `se marca al n√∫mero ${contacto.telefono} ${textoSinContacto}`;
      } else if (index === contactos.length - 1 && !hayContactoExitoso) {
        textoCompleto += ` y se marca al n√∫mero ${contacto.telefono} ${textoSinContacto}`;
      } else if (!hayContactoExitoso) {
        textoCompleto += `, se marca al n√∫mero ${contacto.telefono} ${textoSinContacto}`;
      }
    }
  });
  
  // Si hay contacto exitoso, agregarlo al final
  if (hayContactoExitoso) {
    if (contactos.length > 1) {
      // Si hubo intentos fallidos antes del exitoso
      const intentosFallidos = contactos.filter(c => esSinContacto(c.tipoContacto));
      if (intentosFallidos.length > 0) {
        textoCompleto += `, finalmente ${textoContactoExitoso}`;
      } else {
        textoCompleto += textoContactoExitoso;
      }
    } else {
      textoCompleto = textoContactoExitoso.replace('se marca al n√∫mero', `Titular ${nombreTitular} se marca al n√∫mero`);
    }
  }
  
  return textoCompleto;
}

// Funci√≥n para modificar la funci√≥n crearNota existente (VERSI√ìN CORREGIDA)
function integrarContactosConcatenadosEnNota() {
  // Verificar si ya hemos guardado la funci√≥n original
  
  
  // Guardar referencia a la funci√≥n original SOLO una vez
  funcionOriginalGuardada = window.crearNota;
  
  if (typeof funcionOriginalGuardada !== 'function') {
    console.warn('‚ö†Ô∏è No se encontr√≥ la funci√≥n crearNota original');
    return;
  }
  
  // Sobrescribir la funci√≥n crearNota
  window.crearNota = function() {
    // Llamar a la funci√≥n original PRIMERO
    funcionOriginalGuardada();
    
    // Obtener valores necesarios
    const nombreTitular = document.getElementById('NomTitular')?.value || '';
    
    // Solo proceder si hay nombre de titular
    if (!nombreTitular.trim()) {
      return;
    }
    
    // Generar texto de contactos concatenados
    const textoContactos = generarTextoContactosConcatenados(nombreTitular);
    
    // Obtener el contenido actual de la nota
    const textoNota = document.getElementById('textoNota');
    if (!textoNota) return;
    
    let contenidoNota = textoNota.value;
    
    // Patr√≥n m√°s espec√≠fico para evitar reemplazos m√∫ltiples
    const patronTitular = new RegExp(`Titular\\s+${nombreTitular.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\s+se marca al n√∫mero[^,\\.]*`, 'i');
    
    if (patronTitular.test(contenidoNota)) {
      // Reemplazar el patr√≥n existente con el texto concatenado
      contenidoNota = contenidoNota.replace(patronTitular, textoContactos);
    } else {
      // Buscar patr√≥n m√°s general como fallback
      const patronGeneral = /Titular\s+[^\s]+(?:\s+[^\s]+)*\s+se marca al n√∫mero[^,\.]*/i;
      if (patronGeneral.test(contenidoNota)) {
        contenidoNota = contenidoNota.replace(patronGeneral, textoContactos);
      }
    }
    
    // Actualizar el contenido de la nota
    textoNota.value = contenidoNota;
  };
  
}

// Funci√≥n para conectar el bot√≥n "+" 
/* function conectarBotonAgregarExacto() {
  const botonAgregar = document.getElementById('agregarNumero');
  
  if (botonAgregar) {
    // Verificar si ya tiene nuestro event listener
    
    
    // Marcar el bot√≥n como conectado
    botonAgregar.setAttribute('data-contactos-connected', 'true');
    
    // Agregar el event listener con prevenci√≥n de m√∫ltiples ejecuciones
    botonAgregar.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      // Prevenir m√∫ltiples clics r√°pidos
      if (botonAgregar.disabled) return;
      
      botonAgregar.disabled = true;
      
      try {
        agregarNuevoContactoExacto();
      } finally {
        // Rehabilitar el bot√≥n despu√©s de un peque√±o delay
        setTimeout(() => {
          botonAgregar.disabled = false;
        }, 300);
      }
    });
    
  } else {
    console.warn('‚ö†Ô∏è No se encontr√≥ el bot√≥n con id "agregarNumero"');
  }
} */

// Funci√≥n de inicializaci√≥n principal (VERSI√ìN CORREGIDA)
function inicializarSistemaContactosExactos() {
  // Verificar si ya est√° inicializado
  if (window.ContactosExactosInicializado) {
    return;
  }
  
  
  // Marcar como inicializado
  window.ContactosExactosInicializado = true;
  
  // Conectar bot√≥n agregar
  conectarBotonAgregarExacto();
  
  // Integrar con sistema de notas
  integrarContactosConcatenadosEnNota();
  
}

// ===========================================
// FUNCIONES P√öBLICAS
// ===========================================

// Hacer funciones disponibles globalmente
window.ContactosExactos = {
  agregar: agregarNuevoContactoExacto,
  eliminar: eliminarContactoExacto,
  obtenerTodos: obtenerTodosLosContactosExactos,
  generarTexto: generarTextoContactosConcatenados,
  inicializar: inicializarSistemaContactosExactos,
  // Funci√≥n para reiniciar el sistema si es necesario
  reiniciar: function() {
    window.ContactosExactosInicializado = false;
    funcionOriginalGuardada = null;
    contadorContactosExactos = 1;
    const botonAgregar = document.getElementById('agregarNumero');
    if (botonAgregar) {
      botonAgregar.removeAttribute('data-contactos-connected');
    }
  }
};

// Inicializaci√≥n autom√°tica con protecci√≥n contra m√∫ltiples ejecuciones
document.addEventListener('DOMContentLoaded', function() {
  if (!window.ContactosExactosInicializado) {
    setTimeout(() => {
      inicializarSistemaContactosExactos();
    }, 500);
  }
});

// Tambi√©n en window.onload por si acaso
window.addEventListener('load', function() {
  if (!window.ContactosExactosInicializado) {
    setTimeout(() => {
      inicializarSistemaContactosExactos();
    }, 800);
  }
});

